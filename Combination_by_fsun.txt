	lw	0	1	n       # $1 = n
	lw	0	2	r       # $2 = r
	lw	0	6	one     # $6 = 1
L1	beq	0	2	re1	# r == 0 return(1)
	beq	1	2	re1	# n == r return(1)
	lw	0	6	one	# $6 = 1
	beq	6	2	re2	# r == 1 return(n)
	sw	5	1	stack	# store n in stack
    	add 	6   	5   	5       # stack increase
    	sw  	5   	2   	stack   # store r in stack
    	add 	6   	5   	5       # stack increase
    	sw  	5   	7   	stack   # store return address in stack
    	add 	6   	5   	5       # stack increase and endstack
	lw	0	6	neqone  # $6 = -1
	add	1	6	1       # n=n-1
	lw	0	4	loop    # goto L1
	jalr	4	7	    	# combi(n-1,r)
    	lw  	0   	6   	neqone  # $6 = -1
	add	2	6	2       # r=r-1
    	lw  	0   	4   	loop    # $6 = -1
	jalr	4	7       	# combi(n-1,r-1)
    	lw  	0   	6   	neqone  # load stack 6 = -1
    	add 	5   	6   	5       # stack decrease and startstack
    	lw  	5   	7   	stack   # load old return address 
    	add 	5   	6   	5       # stack decrease
    	lw  	5   	2   	stack   # load old r in r 
    	add 	5   	6   	5       # stack decrease
    	lw  	5   	1   	stack   # load old n in n and end stack
    	beq 	0   	7   	end     # return address == 0 goto end
    	jalr    7   	4       	# goto old fuctions 
re1	lw	0	4	one     # $4 = 1
    	add 	4   	3   	3       # output+ = 1
	beq	0	0	done    # goto done
re2	add	1	3	3	# output+ = n
done 	beq	0	7	end 	# return address == 0 goto end
    	jalr	7	4       	# goto return address  
end	halt                		# end
n	.fill	4
r	.fill	3
one	.fill	1
neqone	.fill	-1
loop	.fill	L1
stack	.fill	0
