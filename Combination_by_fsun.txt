	lw	0	1	n
	lw	0	2	r
	lw	0	6	one
L1	beq	0	2	re1	#r == 0 return(1)
	beq	1	2	re1	#n == r return(1)
	lw	0	6	one	
	beq	6	2	re2	#r == 1 return(n)
	sw	5	1	stack	#store return address
    add 6   5   5
    sw  5   2   stack
    add 6   5   5
    sw  5   7   stack   
    add 6   5   5   #end stack
	lw	0	6	neqone  #$6 = -1
	add	1	6	1       #n-1
	lw	0	4	loop    
	jalr	4	7	    #com(n-1,r)
    lw  0   6   neqone
	add	2	6	2       #r-1
    lw  0   4   loop
	jalr	4	7       #com(n-1,r-1)
    lw  0   6   neqone  #load stack
    add 5   6   5
    lw  5   7   stack
    add 5   6   5
    lw  5   2   stack
    add 5   6   5
    lw  5   1   stack   #end stack
    beq 0   7   end
    jalr    7   4       
re1	lw	0	4	one
    add 4   3   3
	beq	0	0	done
re2	add	1	3	3	#save n at $1 always
done beq	0	7	end
    jalr	7	4
end	halt
n	.fill	5
r	.fill	3
one	.fill	1
neqone	.fill	-1
loop	.fill	L1
store	.fill	0
stack	.fill	0
